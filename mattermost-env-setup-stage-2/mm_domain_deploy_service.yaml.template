---
apiVersion: v1
kind: Service
metadata:
  name: __MM_INSTANCE_KEY__-svc
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8065
  selector:
    app: __MM_INSTANCE_KEY__

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: __MM_INSTANCE_KEY__
spec:
  replicas: __MM_INSTANCE_REPLICAS__ 
  selector:
    matchLabels:
      app: __MM_INSTANCE_KEY__
  template:
    metadata:
      labels:
        app: __MM_INSTANCE_KEY__
        mattermost_deploy_version: "__MM_DEPLOY_VERSION__"
    spec:
      initContainers:
#        - name: init-mysql-mattermost
#          image: haalcala/mm-init-container
#          command:
#          - bash
#          - "-c"
#          - |
#            set -x
#
#            # Generate mysql server-id from pod ordinal index.
#
#            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
#
#            ordinal=${BASH_REMATCH[1]}
#
#            echo \$ordinal $ordinal
#
#            # Add an offset to avoid reserved server-id=0 value.
#            #echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
#            # Copy appropriate conf.d files from config-map to emptyDir.
#
#            if [[ $ordinal -eq 0 ]]; then
#              echo mysql -h __MM_DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE DATABASE IF NOT EXISTS __MM_DB_NAME__"
#              mysql -h __MM_DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE DATABASE IF NOT EXISTS __MM_DB_NAME__"
#
#              echo mysql -h __MM_DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE USER '"__MM_DB_USER__"'@'%' IDENTIFIED BY '"__MM_DB_PASS__"';"
#              mysql -h __MM_DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE USER '"__MM_DB_USER__"'@'%' IDENTIFIED BY '"__MM_DB_PASS__"';"
#
#              echo mysql -h __MM_DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "GRANT ALL PRIVILEGES ON __MM_DB_NAME__.* TO '"__MM_DB_USER__"'@'%';"
#              mysql -h __MM_DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "GRANT ALL PRIVILEGES ON __MM_DB_NAME__.* TO '"__MM_DB_USER__"'@'%';"
#
#              aws --version
#
#              aws s3 mb s3://mm-__MM_INSTANCE_KEY__
#            fi
#
#            exit 0
#          volumeMounts:
#            - name: aws-config
#              mountPath: /root/.aws 
#            - name: import-data
#              mountPath: /import-data 
        - name: init-config
          image: haalcala/mm-init-container
          command: 
            - bash
            - "-c"
            - |

              set -x

              cat >/import-data/start_mattermost.sh<<EOF
              #!/bin/bash -x
              cd /app

              if [ -e "/import-data/default/stickers" ]; then
                cp -R /import-data/default/stickers /app/stickers
              fi

              if [ -e "/import-data/default/plugins" ]; then
                ./bin/mattermost plugin add /import-data/default/plugins/*.tar.gz
              fi

              ./bin/mattermost --config "mysql://__MM_DB_USER__:__MM_DB_PASS__@tcp(__MM_DB_HOST__:__MM_DB_PORT__)/__MM_DB_NAME__?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s"
              EOF

              chmod u+x /import-data/start_mattermost.sh

              # cat /app/config/config.json

              aws s3 sync s3://__DEPLOY_BUCKET__/default /import-data/default

              #if [ "__MM_COMPANY_ID__" != "" ]; then
              #  aws s3 sync s3://__DEPLOY_BUCKET__/__MM_COMPANY_ID__/ /import-data/tmp/
              #
              #  cd /import-data
              #
              #  cat tmp/* > __MM_COMPANY_ID__.tar.gz
              #
              #  tar xvzf __MM_COMPANY_ID__.tar.gz
              #
              #  aws s3 mv s3://__DEPLOY_BUCKET__/__MM_COMPANY_ID__ s3://__DEPLOY_BUCKET__/done/__MM_COMPANY_ID__.tar.gz
              #fi

              exit 0

          volumeMounts:
            - name: aws-config
              mountPath: /root/.aws 
            - name: import-data
              mountPath: /import-data 
            - name: mattermost-conf
              mountPath: /app/config 
      containers:
        - name: __MM_INSTANCE_KEY__
          image: __MM_DOCKER_REPO__:__MM_DOCKER_REPO_TAG__
          resources:
            limits:
              memory: 4Gi
              cpu: "2"
            requests:
              memory: 4Gi
              cpu: "1" 
          command :
            - /import-data/start_mattermost.sh
          ports:
            - name: liveness-port
              containerPort: 8065
          volumeMounts:
            - name: import-data
              mountPath: /import-data 
            - name: mattermost-conf
              mountPath: /app/config 
          #readinessProbe:
          #  exec:
          #    # Check we can execute queries over TCP (skip-networking is off).
          #    command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          #  initialDelaySeconds: 5
          #  periodSeconds: 2
          #  timeoutSeconds: 1
          livenessProbe:
            httpGet:
              path: /
              port: liveness-port
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: liveness-port
            initialDelaySeconds: 60
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 30
      volumes:
        - name: aws-config
          configMap:
            name: mm-instance-conf
            items:
              - key: aws-credentials
                path: credentials # dig directory
              - key: aws-config
                path: config # dig directory
#        - name: import-data
#          emptyDir: {}
#        - name: mattermost-conf
#          emptyDir: {}
    volumeClaimTemplates:
      - metadata:
          name: import-data
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "import-data"
          resources:
            requests:
              storage: 1Gi
      - metadata:
          name: mattermost-conf
        spec:
          accessModes: [ "ReadWriteOnce" ]
          storageClassName: "mattermost-conf"
          resources:
            requests:
              storage: 1Gi
