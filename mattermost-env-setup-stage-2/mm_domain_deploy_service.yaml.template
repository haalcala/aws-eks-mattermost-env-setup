---
apiVersion: v1
kind: Service
metadata:
  name: __MM_INSTANCE_KEY__-svc
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8065
  selector:
    app: __MM_INSTANCE_KEY__

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: __MM_INSTANCE_KEY__
spec:
  replicas: __MM_INSTANCE_REPLICAS__ 
  selector:
    matchLabels:
      app: __MM_INSTANCE_KEY__
  serviceName: "__MM_INSTANCE_KEY__-svc"
  template:
    metadata:
      labels:
        app: __MM_INSTANCE_KEY__
        mattermost_deploy_version: "__MM_DEPLOY_VERSION__"
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:5.7
          command:
          - bash
          - "-c"
          - |
            set -x
            # Generate mysql server-id from pod ordinal index.
            [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            echo \$ordinal $ordinal
            # Add an offset to avoid reserved server-id=0 value.
            #echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
            # Copy appropriate conf.d files from config-map to emptyDir.
            if [[ $ordinal -eq 0 ]]; then
              echo mysql -h $__DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE DATABASE IF NOT EXISTS $__DB_NAME__"
              mysql -h $__DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE DATABASE IF NOT EXISTS $__DB_NAME__"

              echo mysql -h $__DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE USER '"$__DB_USER__"'@'%' IDENTIFIED BY '"$__DB_PASS__"';"
              mysql -h $__DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "CREATE USER '"$__DB_USER__"'@'%' IDENTIFIED BY '"$__DB_PASS__"';"

              echo mysql -h $__DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "GRANT ALL PRIVILEGES ON $__DB_NAME__.* TO '"$__DB_USER__"'@'%';"
              mysql -h $__DB_HOST__ -u__MM_DB_MASTER_USER__ -p__MM_DB_MASTER_PASS__ -e "GRANT ALL PRIVILEGES ON $__DB_NAME__.* TO '"$__DB_USER__"'@'%';"
              
            #  cp /mnt/config-map/master.cnf /mnt/conf.d/
            #else
            #  cp /mnt/config-map/slave.cnf /mnt/conf.d/
            fi

            exit 0
          env:
            - name: __DB_HOST__
              value: __MM_DB_HOST__
            - name: __DB_NAME__
              value: __MM_DB_NAME__
            - name: __DB_USER__
              value: __MM_DB_USER__
            - name: __DB_PASS__
              value: __MM_DB_PASS__
      containers:
        - name: __MM_INSTANCE_KEY__
          image: haalcala/mattermost-prod
          command: 
            - bash
            - /start_mattermost_prod.sh
          ports:
            - containerPort: 8065
          env:
            - name: __DB_HOST__
              value: __MM_DB_HOST__
            - name: __DB_NAME__
              value: __MM_DB_NAME__
            - name: __DB_USER__
              value: __MM_DB_USER__
            - name: __DB_PASS__
              value: __MM_DB_PASS__
          volumeMounts:
            - name: config-json
              mountPath: /app/config/config.json.template # mount nginx-conf volumn to /etc/nginx
              subPath: config.json.template
            - name: start-mattermost-prod
              mountPath: /start_mattermost_prod.sh # mount nginx-conf volumn to /etc/nginx
              subPath: start_mattermost_prod.sh
          #readinessProbe:
          #  exec:
          #    # Check we can execute queries over TCP (skip-networking is off).
          #    command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
          #  initialDelaySeconds: 5
          #  periodSeconds: 2
          #  timeoutSeconds: 1
          livenessProbe:
            exec:
              command: ["curl", "127.0.0.1:8065"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 8065
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1

      volumes:
        - name: config-json
          configMap:
            name: mm-instance-conf
            items:
              - key: config.json.template
                path: config.json.template # dig directory
        - name: start-mattermost-prod
          configMap:
            name: mm-instance-conf
            items:
              - key: start_mattermost_prod.sh
                path: start_mattermost_prod.sh # dig directory
