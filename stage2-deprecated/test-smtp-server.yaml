apiVersion: v1
kind: ConfigMap
metadata:
  name: smtp-conf
data:
  smtp-access: |
    # Check the /usr/share/doc/sendmail/README.cf file for a description
    # of the format of this file. (search for access_db in that file)
    # The /usr/share/doc/sendmail/README.cf is part of the sendmail-doc
    # package.
    #
    # If you want to use AuthInfo with "M:PLAIN LOGIN", make sure to have the
    # cyrus-sasl-plain package installed.
    #
    # By default we allow relaying from localhost...
    Connect:localhost.localdomain           RELAY
    Connect:localhost                       RELAY
    Connect:127.0.0.1                       RELAY
    Connect:192.168                     RELAY
    Connect:172                     RELAY

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: smtp-server
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: smtp-server
  template:
    metadata:
      labels:
        app: smtp-server
    spec:
      containers:
        - name: smtp-server
          image: haalcala/smtp_server
          ports:
            - containerPort: 25
          env:
            - name: container
              value: docker
          volumeMounts:
            - name: smtp-conf
              mountPath: /etc/mail/access # mount nginx-conf volumn to /etc/nginx
              subPath: access
      volumes:
        - name: smtp-conf
          configMap:
            name: smtp-conf
            items:
              - key: smtp-access
                path: access
---
apiVersion: v1
kind: Service
metadata:
  name: smtp-server-svc
spec:
  type: NodePort
  ports:
    - port: 25
      targetPort: 25
  selector:
    app: smtp-server

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-smtp-server
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app: test-smtp-server
  template:
    metadata:
      labels:
        app: test-smtp-server
    spec:
      containers:
        - name: test-smtp-server
          image: golang
          command:
            - bash
            - "-c"
            - |
              set -x

              apt-get update

              # apt-get install -y sendmail telnet
              apt-get install -y telnet vim

              echo "Hello world"

              # echo "Subject: Sendmail gmail Relay 1111

              # Just testing my sendmail gmail relay 1111" | sendmail harold.alcala@vcube.co.jp

              cat > test-mail.go <<EOF

              // Copyright 2013 The Go Authors. All rights reserved.

              // Use of this source code is governed by a BSD-style

              // license that can be found in the LICENSE file.


              package main


              import (

                "fmt"

                "log"

                "net/smtp"

              )


              func Example() {

                // Connect to the remote SMTP server.

                c, err := smtp.Dial("smtp-server-svc:25")

                if err != nil {

                  log.Fatal(err)

                }


                // Set the sender and recipient first

                if err := c.Mail("harold.alcala@vcube.com"); err != nil {

                  log.Fatal(err)

                }

                if err := c.Rcpt("harold.alcala@gmail.com"); err != nil {

                  log.Fatal(err)

                }


                // Send the email body.

                wc, err := c.Data()

                if err != nil {

                  log.Fatal(err)

                }

                _, err = fmt.Fprintf(wc, "This is the email body")

                if err != nil {

                  log.Fatal(err)

                }

                err = wc.Close()

                if err != nil {

                  log.Fatal(err)

                }


                // Send the QUIT command and close the connection.

                err = c.Quit()

                if err != nil {

                  log.Fatal(err)

                }

              }


              // variables to make ExamplePlainAuth compile, without adding

              // unnecessary noise there.

              var (

                from       = "gopher@example.net"

                msg        = []byte("dummy message")

                recipients = []string{"foo@example.com"}

              )


              func ExamplePlainAuth() {

                // hostname is used by PlainAuth to validate the TLS certificate.

                hostname := "smtp-server-svc"

                auth := smtp.PlainAuth("", "user@example.com", "password", hostname)


                err := smtp.SendMail(hostname+":25", auth, from, recipients, msg)

                if err != nil {

                  log.Fatal(err)

                }

              }


              func ExampleSendMail() {

                // Set up authentication information.

                // auth := smtp.PlainAuth("", "harold.alcala@vcube.com", "password", "")


                // Connect to the server, authenticate, set the sender and recipient,

                // and send the email all in one step.

                to := []string{"harold.alcala@vcube.com"}

                msg := []byte("To: harold.alcala@vcube.com\r\n" +

                  "Subject: discount Gophers!\r\n" +

                  "\r\n" +

                  "This is the email body.\r\n")

                err := smtp.SendMail("smtp-server-svc:25", nil, "harold.alcala@vcube.com", to, msg)

                if err != nil {

                  log.Fatal(err)

                }

              }

              func main() {
                Example()
              }

              EOF

              sleep 300

              exit 0
